services:

#  artifactory:
#    image: docker.bintray.io/jfrog/artifactory-oss:latest
#    container_name: artifactory
#    ports:
#      - 8081:8081
#    volumes:
#      - artifactory:/var/opt/jfrog/artifactory
## Add extra Java options by uncommenting the following lines
##    environment:
##      - EXTRA_JAVA_OPTIONS=-Xmx4g
#    restart: always
#    ulimits:
#      nproc: 65535
#      nofile:
#        soft: 32000
#        hard: 48000

#  sonarqube:
#    image: sonarqube:lts
#    container_name: sonarqube
#    ports:
#      - 9000:9000
#      - 9092:9092
#    volumes:
#      - sonarqube:/opt/sonarqube/data
#    restart: always

  jenkins:
    image: jenkins/jenkins:lts
    #image: jdufner/jenkins:latest
    container_name: jenkins
    ports:
      - 8080:8080
      - 50000:50000
#    links:
#      - artifactory
#      - sonarqube
    volumes:
      - /home/jdufner/jenkins:/var/jenkins_home
# Add extra Java options by uncommenting the following lines
#    environment:
#      - EXTRA_JAVA_OPTIONS=-Xmx4g
#    restart: always
#    ulimits:
#      nproc: 65535
#      nofile:
#        soft: 32000
#        hard: 48000

  chrome:
    image: selenium/node-chrome:4.27
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_ENABLE_TRACING=false

  selenium-hub:
    image: selenium/hub:4.27
    container_name: selenium-hub
    ports:
      - 4442:4442
      - 4443:4443
      - 4444:4444
    environment:
      - SE_ENABLE_TRACING=false

  minio:
    image: minio/minio
    command: server --console-address ":9001" /minio/data
    container_name: minio
    ports:
      - 8180:9000
      - 8181:9001
    volumes:
      - /home/jdufner/minio/data:/data
    environment:
      - MINIO_ROOT_USER:minioadmin
      - MINIO_ROOT_PASSWORD:minioadmin
      - MINIO_DEFAULT_BUCKETS:mybucket
#      - MINIO_SCHEME:http
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    volumes:
      - /home/jdufner/postgres/data:/var/lib/postgresql/data
  
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - 8280:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org
      - PGADMIN_DEFAULT_PASSWORD=jdufner
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      # UID and GID of volume must be 5050
      # 'sudo chown 5050:5050 /home/jdufner/pgadmin/data'
      - /home/jdufner/pgadmin/data:/var/lib/pgadmin
    depends_on:
      - postgres

  watchtower:
    image: containrrr/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
# interval means it check every 600 seconds if the observed images changed
    command: --interval 6000 --cleanup --include-stopped --revive-stopped
